name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.17, 1.18, 1.19]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.19'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.19-${{ hashFiles('**/go.sum') }}
    
    - name: Build for multiple platforms
      run: |
        # Linux
        GOOS=linux GOARCH=amd64 go build -o bin/parts-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -o bin/parts-linux-arm64 .
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -o bin/parts-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -o bin/parts-darwin-arm64 .
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -o bin/parts-windows-amd64.exe .
        GOOS=windows GOARCH=arm64 go build -o bin/parts-windows-arm64.exe .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: parts-binaries
        path: bin/parts-*


  examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    
    - name: Build parts
      run: go build -o bin/parts .
    
    - name: Test SSH config example
      run: |
        cd examples/ssh-config
        chmod +x run-example.sh
        ./run-example.sh
    
    - name: Test JavaScript example
      run: |
        cd examples/javascript
        chmod +x run-example.sh
        ./run-example.sh
    
    - name: Test CSS example
      run: |
        cd examples/css
        chmod +x run-example.sh
        ./run-example.sh
    
    - name: Test Python example
      run: |
        cd examples/python
        chmod +x run-example.sh
        ./run-example.sh
    
    - name: Test SQL example
      run: |
        cd examples/sql
        chmod +x run-example.sh
        ./run-example.sh

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test, build, examples]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.19
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: parts-binaries
        path: bin/
    
    - name: Create checksums
      run: |
        cd bin
        sha256sum parts-* > checksums.txt
        cat checksums.txt
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          bin/parts-*
          bin/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}